package bankocr

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

//func TestGetNumberData(t *testing.T) {
//	data := [3][27]byte{
//		{' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ',},
//		{' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|',},
//		{' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|',},
//	}
//	entry := NewEntry(data)
//
//	assert.Equal(t, "333333333", entry.toString())
//}

func TestGetNumberData(t *testing.T) {
	data := [3][27]byte{
		{' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ',},
		{' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|',},
		{' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|', ' ', '_', '|',},
	}
	entry := NewEntry(data)

	except := [3][3]byte{
		{' ', '_', ' ',},
		{' ', '_', '|',},
		{' ', '_', '|',},
	}
	assert.Equal(t, except, entry.getNumberData(1))
	assert.Equal(t, except, entry.getNumberData(2))
	assert.Equal(t, except, entry.getNumberData(3))
	assert.Equal(t, except, entry.getNumberData(4))
	assert.Equal(t, except, entry.getNumberData(5))
	assert.Equal(t, except, entry.getNumberData(6))
	assert.Equal(t, except, entry.getNumberData(7))
	assert.Equal(t, except, entry.getNumberData(8))
	assert.Equal(t, except, entry.getNumberData(9))
}

func TestGetNumber1(t *testing.T) {
	data := [3][27]byte{
		{' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ',},
		{' ', ' ', '|', ' ', '_', '|', ' ', '_', '|', '|', '_', '|', '|', '_', ' ', '|', '_', ' ', ' ', ' ', '|', '|', '_', '|', '|', '_', '|',},
		{' ', ' ', '|', '|', '_', ' ', ' ', '_', '|', ' ', ' ', '|', ' ', '_', '|', '|', '_', '|', ' ', ' ', '|', '|', '_', '|', ' ', '_', '|',},
	}
	entry := NewEntry(data)

	assert.Equal(t, "1", entry.GetNumber(1))
}

func TestGetNumber2(t *testing.T) {
	data := [3][27]byte{
		{' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ',},
		{' ', ' ', '|', ' ', '_', '|', ' ', '_', '|', '|', '_', '|', '|', '_', ' ', '|', '_', ' ', ' ', ' ', '|', '|', '_', '|', '|', '_', '|',},
		{' ', ' ', '|', '|', '_', ' ', ' ', '_', '|', ' ', ' ', '|', ' ', '_', '|', '|', '_', '|', ' ', ' ', '|', '|', '_', '|', ' ', '_', '|',},
	}
	entry := NewEntry(data)

	assert.Equal(t, "2", entry.GetNumber(2))
}

func TestGetNumber3(t *testing.T) {
	data := [3][27]byte{
		{' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', '_', ' ',},
		{' ', ' ', '|', ' ', '_', '|', ' ', '_', '|', '|', '_', '|', '|', '_', ' ', '|', '_', ' ', ' ', ' ', '|', '|', '_', '|', '|', '_', '|',},
		{' ', ' ', '|', '|', '_', ' ', ' ', '_', '|', ' ', ' ', '|', ' ', '_', '|', '|', '_', '|', ' ', ' ', '|', '|', '_', '|', ' ', '_', '|',},
	}
	entry := NewEntry(data)

	assert.Equal(t, "3", entry.GetNumber(3))
}

